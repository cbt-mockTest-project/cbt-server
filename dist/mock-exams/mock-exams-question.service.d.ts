import { ExamCoAuthor } from './../exam-co-author/entities/exam-co-author.entity';
import { MockExamQuestionBookmark } from 'src/mock-exams/entities/mock-exam-question-bookmark.entity';
import { User } from 'src/users/entities/user.entity';
import { Repository } from 'typeorm';
import { CreateMockExamQuestionInput, CreateMockExamQuestionOutput } from './dtos/createMockExamQuestion.dto';
import { DeleteMockExamQuestionInput, DeleteMockExamQuestionOutput } from './dtos/deleteMockExamQuestion.dto';
import { EditMockExamQuestionInput, EditMockExamQuestionOutput } from './dtos/editMockExamQuestion.dto';
import { ReadAllMockExamQuestionOutput } from './dtos/readAllMockExamQuestion.dto';
import { ReadAllQuestionsOutput } from './dtos/readAllQuestions.dto';
import { ReadMockExamQuestionInput, ReadMockExamQuestionOutput } from './dtos/readMockExamQuestion.dto';
import { ReadMockExamQuestionNumbersInput, ReadMockExamQuestionNumbersOutput } from './dtos/readMockExamQuestionNumbers.dto';
import { ReadMockExamQuestionsByMockExamIdInput, ReadMockExamQuestionsByMockExamIdOutput } from './dtos/readMockExamQuestionsByMockExamId.dto';
import { ReadMockExamQuestionsByStateInput, ReadMockExamQuestionsByStateOutput } from './dtos/readMockExamQuestionsByState.dto';
import { UpdateApprovedStateOfMockExamQuestionInput, UpdateApprovedStateOfMockExamQuestionOutput } from './dtos/updateApprovedStateOfMockExamQuestion.dto';
import { MockExamQuestionComment } from './entities/mock-exam-question-comment.entity';
import { MockExamQuestionFeedback } from './entities/mock-exam-question-feedback.entity';
import { MockExamQuestionState } from './entities/mock-exam-question-state.entity';
import { MockExamQuestion } from './entities/mock-exam-question.entity';
import { MockExam } from './entities/mock-exam.entity';
export declare class MockExamQuestionService {
    private readonly mockExamQuestion;
    private readonly mockExam;
    private readonly mockExamQuestionState;
    private readonly mockExamQuestionBookmark;
    private readonly mockExamQuestionFeedback;
    private readonly mockExamQuestionComment;
    private readonly examCoAuthor;
    constructor(mockExamQuestion: Repository<MockExamQuestion>, mockExam: Repository<MockExam>, mockExamQuestionState: Repository<MockExamQuestionState>, mockExamQuestionBookmark: Repository<MockExamQuestionBookmark>, mockExamQuestionFeedback: Repository<MockExamQuestionFeedback>, mockExamQuestionComment: Repository<MockExamQuestionComment>, examCoAuthor: Repository<ExamCoAuthor>);
    createMockExamQuestion(user: User, createMockExamQuestionInput: CreateMockExamQuestionInput): Promise<CreateMockExamQuestionOutput>;
    updateApprovedStateOfMockExamQuestion(updateApprovedStateOfMockExamQuestionInput: UpdateApprovedStateOfMockExamQuestionInput): Promise<UpdateApprovedStateOfMockExamQuestionOutput>;
    readMockExamQuestion(readMockExamQuestionInput: ReadMockExamQuestionInput, user: User): Promise<ReadMockExamQuestionOutput>;
    editMockExamQuestion(user: User, editMockExamQuestionInput: EditMockExamQuestionInput): Promise<EditMockExamQuestionOutput>;
    deleteMockExamQuestion(user: User, deleteMockExamQuestionInput: DeleteMockExamQuestionInput): Promise<DeleteMockExamQuestionOutput>;
    readAllQuestions(): Promise<ReadAllQuestionsOutput>;
    readAllMockExamQuestion(user: User): Promise<ReadAllMockExamQuestionOutput>;
    readMockExamQuestionsByMockExamId(readMockExamQuestionsByMockExamIdInput: ReadMockExamQuestionsByMockExamIdInput, user: User): Promise<ReadMockExamQuestionsByMockExamIdOutput>;
    readMockExamQuestionNumbers(readMockExamQuestionNumbersInput: ReadMockExamQuestionNumbersInput): Promise<ReadMockExamQuestionNumbersOutput>;
    readMockExamQuestionsByState(user: User, readMockExamQuestionsByStateInput: ReadMockExamQuestionsByStateInput): Promise<ReadMockExamQuestionsByStateOutput>;
}
