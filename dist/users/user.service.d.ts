import { Response } from 'express';
import { CoreOutput } from 'src/common/dtos/output.dto';
import { JwtService } from 'src/jwt/jwt.service';
import { MailService } from 'src/mail/mail.service';
import { QueryRunner, Repository } from 'typeorm';
import { TelegramService } from './../telegram/telegram.service';
import { EmailVerificationInput, EmailVerificationOutput } from './dtos/EmailVerification.dto';
import { ChangePasswordAfterVerifyingInput, ChangePasswordAfterVerifyingOutput } from './dtos/changePasswordAfterVerifying.dto';
import { CheckPasswordInput, CheckPasswordOutput } from './dtos/checkPassword.dto';
import { CreateFeedbackInput, CreateFeedbackOutput } from './dtos/createFeedback.dto';
import { EditProfileInput, EditProfileOutput } from './dtos/editProfile.dto';
import { KakaoLoginInput, KakaoLoginOutput } from './dtos/kakaoLogin.dto';
import { LoginInput, LoginOutput } from './dtos/login.dto';
import { MeOutput } from './dtos/me.dto';
import { RegisterInput, RegisterOutput } from './dtos/register.dto';
import { RestoreUserInput } from './dtos/restoreUser.dto';
import { SearchUserInput, SearchUserOutput } from './dtos/searchUser.dto';
import { SendFindPasswordMailInput, SendFindPasswordMailOutput } from './dtos/sendFindPasswordMail.dto';
import { SendVerificationMailInput, SendVerificationMailOutput } from './dtos/sendVerificationMail.dto';
import { UpdateAdblockPermissionInput, UpdateAdblockPermissionOutput } from './dtos/updateAdblockPermission.dto';
import { UserProfileInput, UserProfileOutput } from './dtos/userProfile.dto';
import { Feedback } from './entities/feedback.entity';
import { User } from './entities/user.entity';
import { Verification } from './entities/verification.entity';
import { NoticeService } from './notice.service';
import { CheckUserRoleInput, CheckUserRoleOutput } from './dtos/checkUserRole.dto';
import { ChangeClientRoleInput } from './dtos/changeClientRole.dto';
import { ChangeClientRoleAndCreatePaymentInput, ChangeClientRoleAndCreatePaymentOutput } from './dtos/changeClientRoleAndCreatePayment.dto';
import { PaymentService } from 'src/payments/payment.service';
import { UserAndRole } from './entities/userAndRole.entity';
import { Role } from './entities/role.entity';
import { CreateUserRoleInput, CreateUserRoleOutput } from './dtos/createUserRole.dto';
import { DeleteUserRoleInput, DeleteUserRoleOutput } from './dtos/deleteUserRole.dto';
import { CreateFreeTrialRoleOutput } from './dtos/createFreeTrialRole.dto';
import { ClearFreeTrialRoleOutput } from './dtos/clearFreeTrialRole.dto';
import { GetRoleCountInput, GetRoleCountOutput } from './dtos/getRoleCount';
export declare class UserService {
    private readonly users;
    private readonly verification;
    private readonly feedback;
    private readonly userAndRole;
    private readonly role;
    private readonly mailService;
    private readonly jwtService;
    private readonly telegramService;
    private readonly noticeService;
    private readonly paymentService;
    constructor(users: Repository<User>, verification: Repository<Verification>, feedback: Repository<Feedback>, userAndRole: Repository<UserAndRole>, role: Repository<Role>, mailService: MailService, jwtService: JwtService, telegramService: TelegramService, noticeService: NoticeService, paymentService: PaymentService);
    register(registerInput: RegisterInput): Promise<RegisterOutput>;
    sendVerificationMail(sendVerificationInput: SendVerificationMailInput): Promise<SendVerificationMailOutput>;
    sendFindPasswordMail(sendFindPasswordMailInput: SendFindPasswordMailInput): Promise<SendFindPasswordMailOutput>;
    emailVerification(emailVerificationInput: EmailVerificationInput): Promise<EmailVerificationOutput>;
    userProfile(userProfileInput: UserProfileInput): Promise<UserProfileOutput>;
    login(loginInput: LoginInput, res: Response): Promise<LoginOutput>;
    logout(res: Response): Promise<CoreOutput>;
    me(user: User): Promise<MeOutput>;
    checkPassword(checkPassWordInput: CheckPasswordInput, user: User): Promise<CheckPasswordOutput>;
    editProfile(editProfileInput: EditProfileInput, user: User): Promise<EditProfileOutput>;
    deleteUser(user: User): Promise<CoreOutput>;
    restoreUser(restoreUserInput: RestoreUserInput): Promise<CoreOutput>;
    changePasswordAfterVerifying(changePasswordAfterVerifyingInput: ChangePasswordAfterVerifyingInput): Promise<ChangePasswordAfterVerifyingOutput>;
    createFeedback(createFeedback: CreateFeedbackInput, user: User): Promise<CreateFeedbackOutput>;
    kakaoLogin(kakaoLoginInput: KakaoLoginInput, res: Response): Promise<KakaoLoginOutput>;
    googleLogin(kakaoLoginInput: KakaoLoginInput, res: Response): Promise<KakaoLoginOutput>;
    searchUser(searchUserInput: SearchUserInput): Promise<SearchUserOutput>;
    updateAdBlockPermission(updateAdBlockPermission: UpdateAdblockPermissionInput): Promise<UpdateAdblockPermissionOutput>;
    checkUserRole(checkUserRoleInput: CheckUserRoleInput, user: User): Promise<CheckUserRoleOutput>;
    changeClientRole(changeClientRoleInput: ChangeClientRoleInput, user: User, queryRunner?: QueryRunner): Promise<CoreOutput>;
    changeClientRoleAndCreatePayment(user: User, changeClientRoleAndCreatePaymentInput: ChangeClientRoleAndCreatePaymentInput): Promise<ChangeClientRoleAndCreatePaymentOutput>;
    createUserRole(createUserRoleInput: CreateUserRoleInput): Promise<CreateUserRoleOutput>;
    createFreeTrialRole(user: User): Promise<CreateFreeTrialRoleOutput>;
    deleteUserRole(deleteUserRoleInput: DeleteUserRoleInput): Promise<DeleteUserRoleOutput>;
    clearFreeTrialRole(): Promise<ClearFreeTrialRoleOutput>;
    getRoleCount(getRoleCountInput: GetRoleCountInput): Promise<GetRoleCountOutput>;
    syncRole(): Promise<{
        ok: boolean;
    }>;
}
